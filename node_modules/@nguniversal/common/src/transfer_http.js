"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var http_1 = require("@angular/common/http");
var core_1 = require("@angular/core");
var of_1 = require("rxjs/observable/of");
var filter_1 = require("rxjs/operator/filter");
var first_1 = require("rxjs/operator/first");
var toPromise_1 = require("rxjs/operator/toPromise");
var do_1 = require("rxjs/operator/do");
var platform_browser_1 = require("@angular/platform-browser");
function getHeadersMap(headers) {
    var headersMap = {};
    for (var _i = 0, _a = headers.keys(); _i < _a.length; _i++) {
        var key = _a[_i];
        headersMap[key] = (headers.getAll(key));
    }
    return headersMap;
}
var TransferHttpCacheInterceptor = (function () {
    function TransferHttpCacheInterceptor(appRef, transferState) {
        var _this = this;
        this.transferState = transferState;
        this.isCacheActive = true;
        // Stop using the cache if the application has stabilized, indicating initial rendering is
        // complete.
        // Stop using the cache if the application has stabilized, indicating initial rendering is
        // complete.
        toPromise_1.toPromise
            .call(first_1.first.call(filter_1.filter.call(appRef.isStable, function (isStable) { return isStable; })))
            .then(function () { _this.isCacheActive = false; });
    }
    TransferHttpCacheInterceptor.prototype.invalidateCacheEntry = function (url) {
        this.transferState.remove(platform_browser_1.makeStateKey('G.' + url));
        this.transferState.remove(platform_browser_1.makeStateKey('H.' + url));
    };
    TransferHttpCacheInterceptor.prototype.intercept = function (req, next) {
        var _this = this;
        // Stop using the cache if there is a mutating call.
        if (req.method !== 'GET' && req.method !== 'HEAD') {
            this.isCacheActive = false;
            this.invalidateCacheEntry(req.url);
        }
        if (!this.isCacheActive) {
            // Cache is no longer active. Pass the request through.
            return next.handle(req);
        }
        var key = (req.method === 'GET' ? 'G.' : 'H.') + req.url;
        var storeKey = platform_browser_1.makeStateKey(key);
        if (this.transferState.hasKey(storeKey)) {
            // Request found in cache. Respond using it.
            var response = this.transferState.get(storeKey, {});
            return of_1.of(new http_1.HttpResponse({
                body: response.body,
                headers: new http_1.HttpHeaders(response.headers),
                status: response.status,
                statusText: response.statusText,
                url: response.url,
            }));
        }
        else {
            // Request not found in cache. Make the request and cache it.
            var httpEvent = next.handle(req);
            return do_1._do.call(httpEvent, function (event) {
                if (event instanceof http_1.HttpResponse) {
                    _this.transferState.set(storeKey, {
                        body: event.body,
                        headers: getHeadersMap(event.headers),
                        status: event.status,
                        statusText: event.statusText,
                        url: (event.url),
                    });
                }
            });
        }
    };
    TransferHttpCacheInterceptor.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    TransferHttpCacheInterceptor.ctorParameters = function () { return [
        { type: core_1.ApplicationRef, },
        { type: platform_browser_1.TransferState, },
    ]; };
    return TransferHttpCacheInterceptor;
}());
exports.TransferHttpCacheInterceptor = TransferHttpCacheInterceptor;
/**
 * An NgModule used in conjunction with `ServerTransferHttpCacheModule` to transfer cached HTTP
 * calls from the server to the client application.
 */
var TransferHttpCacheModule = (function () {
    function TransferHttpCacheModule() {
    }
    TransferHttpCacheModule.decorators = [
        { type: core_1.NgModule, args: [{
                    imports: [platform_browser_1.BrowserTransferStateModule],
                    providers: [
                        TransferHttpCacheInterceptor,
                        { provide: http_1.HTTP_INTERCEPTORS, useExisting: TransferHttpCacheInterceptor, multi: true },
                    ],
                },] },
    ];
    /** @nocollapse */
    TransferHttpCacheModule.ctorParameters = function () { return []; };
    return TransferHttpCacheModule;
}());
exports.TransferHttpCacheModule = TransferHttpCacheModule;
//# sourceMappingURL=transfer_http.js.map